#!/usr/bin/env python

import numpy as np
import sys
from astropy.io import fits
from scipy.interpolate import InterpolatedUnivariateSpline as IUSpline
from scipy.optimize import minimize
import matplotlib.pyplot as plt

#===========================================================================================

from functions.up_parse import Up_parse
from functions.functions  import *
#import time
#start_time = time.time()

show_spectra = False # True to plot original/convolved/3splined spectra
speed_light = 299792.458 # km/s

#===========================================================================================
# PRINT TO THE SCREEN

def welcome_page():
    print ""
    print "================================ voffset ========================================"
    print ""
    print " Usage:  voffset <list of spectra> --an anchor.fits [--option]"
    print ""
    print "================================================================================="
    print ""
    print " <list of spectra> ..... : List of UVES_popler output files to cross-correlate"
    print ""
    print "          --an ......... : Followed with a path to the anchor spectrum;"
    print "          .............. : other spectra will be cross-correlated with it."
    print ""
    print " Options: --fwhm ....... : Folowed with a path to a file with Gaussian FWHM kernels"
    print "          .............. : for each of the spectra including the anchor one;"
    print "          .............. : if not given, 3-pixel width is used instead."
    print "          --plot ....... : Create a pdf file with off-set distribution bar chart."
    print "          --chi2plots .. : Plot chi2 fitted with a porabola for each spectrum."
    print ""
    print "================================================================================="
    print ""

def no_UVES_popler(no_Up_file):
    print "==============================================================="
    print "'{}' is not UVES_popler's output file!".format(no_Up_file)
    print "voffset was designed to work with UVES_popler files only."
    print "==============================================================="

def anchor_no_UVES_popler():
    print "==============================================================="
    print "The anchor spectrum is not UVES_popler's output file!"
    print "voffset was designed to work with UVES_popler files only."
    print "==============================================================="


#===========================================================================================
# CHECKS

if len(sys.argv)==1 or not '--an' in sys.argv:
    welcome_page()
    quit()

# Put spectra into a list
file_list = []
for i in range(1,len(sys.argv)):
    if sys.argv[i] != '--an' and sys.argv[i] != '--fwhm' and sys.argv[i] != '--plot' and sys.argv[i] != '--chi2plots':
        file_list.append(sys.argv[i])
    else: break

if len(file_list) == 0:
    print "====================================="
    print " Warning: no spectra were specified!"
    print "====================================="
    quit()
# Find anchor spectrum and file with wavelength ranges
wr_path = []
res_path = None
for i in range(1+len(file_list),len(sys.argv)):
    if sys.argv[i] == '--an':
        try:
            an_path = sys.argv[i+1]
        except IndexError:
            print "==========================================="
            print " Warning: no anchor spectrum was specified!"
            print "==========================================="
            quit()
    elif sys.argv[i] == '--fwhm':
        try:
            res_path = sys.argv[i+1]
        except IndexError:
            print "==========================================================="
            print " Warning: no file with Gaussian FWHM kernels was specified!"
            print "==========================================================="
            quit()
    else:
        pass


# Check if the input spectra come from UVES_popler
for spec in file_list:
    f = fits.open(spec)
    try:
        if not any('UVES_popler' in i for i in f[0].header['HISTORY']):
            no_UVES_popler(spec)
            quit()
        else:
            pass
    except KeyError:
        no_UVES_popler(spec)
        quit()
# Check if the anchor spectrum is from UVES_popler
f = fits.open(an_path)
try:
    if not any('UVES_popler' in i for i in f[0].header['HISTORY']):
        anchor_no_UVES_popler()
        quit()
    else:
        pass
except KeyError:
    anchor_no_UVES_popler()
    quit()
f.close()


#===========================================================================================
# ALL GOOD -- WELCOME MESSAGE
print ""
print "================================ voffset ========================================"
print ""
if res_path == None:
    print "No file with Gaussian kernels was specified!"
    print "3-pixel width will be used instead."
    print "................................................................................."

#===========================================================================================
# PARSING FILES

# open file to save in
file = open("voffset_result.dat",'w')

# Anchor spectrum --------------------------------------------------------------------------

# parse the fits file
an_spec = Up_parse(an_path)
if show_spectra:
    plt.axhline(y=0,ls="--",c="gray")
    plt.axhline(y=1,ls="--",c="gray")
    plt.plot(an_spec.wave,an_spec.flux,drawstyle="steps-mid",c="g",label="original")

# make flux values in clipped pixels to be np.nan
an_spec.fix_clip()
# make error values in clipped pixels to be median
an_spec.fix_clip_err_med()
# convolve with Gaussian to increase S/N
an_spec.convolve(res_path)
if show_spectra:
    plt.plot(an_spec.wave,an_spec.flux,drawstyle="steps-mid",c="r",label="convolved")
# create continuous functions by cubic spline
template_func = IUSpline(an_spec.wave,an_spec.flux)
template_err_func = IUSpline(an_spec.wave,an_spec.error)

if show_spectra:
    wave_detile = np.array([np.arange(an_spec.wave[j],an_spec.wave[j+1],(an_spec.wave[j+1]-an_spec.wave[j])/10) for j in range(len(an_spec.wave)-1)])
    wave_detile = wave_detile.flatten()
    plt.plot(wave_detile,template_func(wave_detile),c="b",label="3spline")
    #plt.legend()
    #plt.show()

print ""
print 'Anchor spectrum: {}'.format(an_spec.file_name)
print "................................................................................."
print ""
file.write("{} {} {}\n".format(an_spec.file_name,0.0,0.0))

off_sets_for_plot = [0.0]

# Other spectra ----------------------------------------------------------------------------
print 'Spectra to determine the velocity off-sets for:'

# Exclude the anchor spectrum if it appears in the list being analysed
for name in file_list:
    if name.split('/')[-1] == an_spec.file_name:
        print ""
        print '{} is the anchor spectrum => Excluded from the list'.format(name.split('/')[-1])
        file_list.remove(name)

# Parse files in the list
for spec_i in range(len(file_list)):
    spec = Up_parse(file_list[spec_i])
    spec.fix_clip()
    spec.convolve(res_path)
    spec.fix_clip()
    spec.fix_clip_err_nan()
    spec.get_mask(an_spec)
    if show_spectra:
#        plt.plot(spec.wave,spec.flux,drawstyle="steps-mid",c="orange",label="tested")
        plt.legend()
        plt.show()

    # Minimise either using scipy routine or using a 'direct' method
    scipy_optimize_minimize = False
    # if False, directly calculates chi2 in a few points and takes min
    # if True, uses scipy.interpolate.InterpolatedUnivariateSpline module to minimise chi2
    if scipy_optimize_minimize: # at the current version, this way does not give uncertainties on the offsets
        v_guess  = -0.2 # Avoid using 0.0: some minimizing methods fail
        res_min  = minimize(chi2,v_guess,args=(template_func,template_err_func,spec),method='BFGS', tol=1e-3)
        # try also method 'Nelder-Mead', but watch the v_guess=0.0 case.
        try:
            off_set = res_min.x[0]
        except IndexError:
            off_set = res_min.x
        try:
            chi2_min = res_min.fun[0]
        except TypeError:
            chi2_min = res_min.fun
    else:
        # find the shift using arrays (no numerical minimizing)
        off_set_list = np.arange(-3.0,3.0001,0.001)
        chisq = chi2(off_set_list,template_func,template_err_func,spec)
        i_min = np.argmin(chisq)
        # Fit data close to the minimum with a parabola
        n_points = 70 # number of data points around the minimum to fit with parabola
        chi2_fit = np.polyfit(off_set_list[i_min-n_points:i_min+n_points],chisq[i_min-n_points:i_min+n_points],2)
        fit_line = np.poly1d(chi2_fit)
        off_set  = -1.0*chi2_fit[1]/(2.0*chi2_fit[0]) # analytical solution for the off-set at the minimum
        chi2_min = -1.0*chi2_fit[1]**2/(4.0*chi2_fit[0]) + chi2_fit[2] # analytical solution for the minimum
        c_new = chi2_fit[1]**2/(4.0*chi2_fit[0]) - 1.0 # c-coefficient after substitution of chi2_min+1
        # Find roots of quadratic to get +/- range of (chi2_min+1)
        pos_1sig = (-1.0*chi2_fit[1]+(chi2_fit[1]**2 - 4.0*chi2_fit[0]*c_new)**0.5)/(2.0*chi2_fit[0])
        neg_1sig = (-1.0*chi2_fit[1]-(chi2_fit[1]**2 - 4.0*chi2_fit[0]*c_new)**0.5)/(2.0*chi2_fit[0])
        delta_p  = pos_1sig - off_set
        if "--chi2plots" in sys.argv:
            plt.xlim([off_set_list[i_min-n_points-10],off_set_list[i_min+n_points+10]])
            plt.ylim([chi2_min-0.5,chi2_min+3])
            plt.axvline(off_set,ls="--",color="g") # minimum
            plt.axvline(neg_1sig,color="r") # minimum - 1sigma
            plt.axvline(pos_1sig,color="r") # minimum + 1sigma
            plt.axvline(off_set_list[i_min-n_points]) # range of points fitted with parabola
            plt.axvline(off_set_list[i_min+n_points])
            plt.scatter(off_set_list,chisq,color=["k"]*len(off_set_list))
            x_detail = np.arange(-4.0,4.00001,0.0001)
            plt.plot(x_detail,fit_line(x_detail))
            ax = plt.gca()
            ax.ticklabel_format(useOffset=False)
            plt.show()

    # change the sign to represent the shift with respect to the anchor (not vice versa)
    off_set = -1.0*off_set
        
    # print on the screen and in the file
#    print ""
    print 'Spectrum: {} | off_set = {:.4f} +/- {:.4f} km/s'.format(spec.file_name,off_set,delta_p)
    if spec_i != len(file_list)-1:
        file.write("{} {:.4f} {:.4f}\n".format(spec.file_name,off_set,delta_p))
    else:
        file.write("{} {:.4f} {:.4f}".format(spec.file_name,off_set,delta_p))
    off_sets_for_plot.append(off_set)

file.close()

if '--plot' in sys.argv:
    off_set_plot(off_sets_for_plot)
else:
    pass

#===========================================================================================
# ALL DONE
print "................................................................................."
print ""
print "All done!"
print "================================================================================="
#print " {} s".format(time.time()-start_time)
